 

public delegate TR ZipFunc<T1, T2, T3, TR>(T1 arg1, T2 arg2, T3 arg3, );
public delegate TR ZipFunc<T1, T2, T3, T4, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, );
public delegate TR ZipFunc<T1, T2, T3, T4, T5, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, );
public delegate TR ZipFunc<T1, T2, T3, T4, T5, T6, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, );
public delegate TR ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, );



public static IObservable<TR> Zip<T1, T2, T3, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, ZipFunc<T1, T2, T3, TR> resultSelector)
{
    return new ZipObservable<T1, T2, T3, TR>(source1, source2, source3, resultSelector);
}

public static IObservable<TR> Zip<T1, T2, T3, T4, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, ZipFunc<T1, T2, T3, T4, TR> resultSelector)
{
    return new ZipObservable<T1, T2, T3, T4, TR>(source1, source2, source3, source4, resultSelector);
}

public static IObservable<TR> Zip<T1, T2, T3, T4, T5, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector)
{
    return new ZipObservable<T1, T2, T3, T4, T5, TR>(source1, source2, source3, source4, source5, resultSelector);
}

public static IObservable<TR> Zip<T1, T2, T3, T4, T5, T6, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
{
    return new ZipObservable<T1, T2, T3, T4, T5, T6, TR>(source1, source2, source3, source4, source5, source6, resultSelector);
}

public static IObservable<TR> Zip<T1, T2, T3, T4, T5, T6, T7, TR>(this IObservable<T1> source1, IObservable<T2> source2, IObservable<T3> source3, IObservable<T4> source4, IObservable<T5> source5, IObservable<T6> source6, IObservable<T7> source7, ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
{
    return new ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR>(source1, source2, source3, source4, source5, source6, source7, resultSelector);
}









internal class ZipObservable<T1, T2, T3, TR> : OperatorObservableBase<TR>
{
    IObservable<T1> source1;
    IObservable<T2> source2;
    IObservable<T3> source3;
    ZipFunc<T1, T2, T3, TR> resultSelector;

    public ZipObservable(
        IObservable<T1> source1,
        IObservable<T2> source2,
        IObservable<T3> source3,
          ZipFunc<T1, T2, T3, TR> resultSelector)
        : base(
            source1.IsRequiredSubscribeOnCurrentThread() || 
            source2.IsRequiredSubscribeOnCurrentThread() || 
            source3.IsRequiredSubscribeOnCurrentThread() || 
            false)
    {
        this.source1 = source1;
        this.source2 = source2;
        this.source3 = source3;
        this.resultSelector = resultSelector;
    }

    protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
    {
        return new Zip(this, observer, cancel).Run();
    }

    class Zip : NthZipObserverBase<TR>
    {
        readonly ZipObservable<T1, T2, T3, TR> parent;
        readonly object gate = new object();
        readonly Queue<T1> q1 = new Queue<T1>();
        readonly Queue<T2> q2 = new Queue<T2>();
        readonly Queue<T3> q3 = new Queue<T3>();

        public Zip(ZipObservable<T1, T2, T3, TR> parent, IObserver<TR> observer, IDisposable cancel)
            : base(observer, cancel)
        {
            this.parent = parent;
        }

        public IDisposable Run()
        {
            base.SetQueue(new System.Collections.ICollection[] { q1, q2, q3 });
            var s1 = parent.source1.Subscribe(new ZipObserver<T1>(gate, this, 0, q1));
            var s2 = parent.source2.Subscribe(new ZipObserver<T2>(gate, this, 1, q2));
            var s3 = parent.source3.Subscribe(new ZipObserver<T3>(gate, this, 2, q3));

            return StableCompositeDisposable.Create(s1, s2, s3, Disposable.Create(() =>
            {
                lock (gate)
                {
                    q1.Clear(); q2.Clear(); q3.Clear();
                }
            }));
        }

        public override TR GetResult()
        {
            return parent.resultSelector(q1.Dequeue(), q2.Dequeue(), q3.Dequeue());
        }

        public override void OnNext(TR value)
        {
            base.observer.OnNext(value);
        }

        public override void OnError(Exception error)
        {
            try { observer.OnError(error); }
            finally { Dispose(); }
        }

        public override void OnCompleted()
        {
            try { observer.OnCompleted(); }
            finally { Dispose(); }
        }
    }
}


internal class ZipObservable<T1, T2, T3, T4, TR> : OperatorObservableBase<TR>
{
    IObservable<T1> source1;
    IObservable<T2> source2;
    IObservable<T3> source3;
    IObservable<T4> source4;
    ZipFunc<T1, T2, T3, T4, TR> resultSelector;

    public ZipObservable(
        IObservable<T1> source1,
        IObservable<T2> source2,
        IObservable<T3> source3,
        IObservable<T4> source4,
          ZipFunc<T1, T2, T3, T4, TR> resultSelector)
        : base(
            source1.IsRequiredSubscribeOnCurrentThread() || 
            source2.IsRequiredSubscribeOnCurrentThread() || 
            source3.IsRequiredSubscribeOnCurrentThread() || 
            source4.IsRequiredSubscribeOnCurrentThread() || 
            false)
    {
        this.source1 = source1;
        this.source2 = source2;
        this.source3 = source3;
        this.source4 = source4;
        this.resultSelector = resultSelector;
    }

    protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
    {
        return new Zip(this, observer, cancel).Run();
    }

    class Zip : NthZipObserverBase<TR>
    {
        readonly ZipObservable<T1, T2, T3, T4, TR> parent;
        readonly object gate = new object();
        readonly Queue<T1> q1 = new Queue<T1>();
        readonly Queue<T2> q2 = new Queue<T2>();
        readonly Queue<T3> q3 = new Queue<T3>();
        readonly Queue<T4> q4 = new Queue<T4>();

        public Zip(ZipObservable<T1, T2, T3, T4, TR> parent, IObserver<TR> observer, IDisposable cancel)
            : base(observer, cancel)
        {
            this.parent = parent;
        }

        public IDisposable Run()
        {
            base.SetQueue(new System.Collections.ICollection[] { q1, q2, q3, q4 });
            var s1 = parent.source1.Subscribe(new ZipObserver<T1>(gate, this, 0, q1));
            var s2 = parent.source2.Subscribe(new ZipObserver<T2>(gate, this, 1, q2));
            var s3 = parent.source3.Subscribe(new ZipObserver<T3>(gate, this, 2, q3));
            var s4 = parent.source4.Subscribe(new ZipObserver<T4>(gate, this, 3, q4));

            return StableCompositeDisposable.Create(s1, s2, s3, s4, Disposable.Create(() =>
            {
                lock (gate)
                {
                    q1.Clear(); q2.Clear(); q3.Clear(); q4.Clear();
                }
            }));
        }

        public override TR GetResult()
        {
            return parent.resultSelector(q1.Dequeue(), q2.Dequeue(), q3.Dequeue(), q4.Dequeue());
        }

        public override void OnNext(TR value)
        {
            base.observer.OnNext(value);
        }

        public override void OnError(Exception error)
        {
            try { observer.OnError(error); }
            finally { Dispose(); }
        }

        public override void OnCompleted()
        {
            try { observer.OnCompleted(); }
            finally { Dispose(); }
        }
    }
}


internal class ZipObservable<T1, T2, T3, T4, T5, TR> : OperatorObservableBase<TR>
{
    IObservable<T1> source1;
    IObservable<T2> source2;
    IObservable<T3> source3;
    IObservable<T4> source4;
    IObservable<T5> source5;
    ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector;

    public ZipObservable(
        IObservable<T1> source1,
        IObservable<T2> source2,
        IObservable<T3> source3,
        IObservable<T4> source4,
        IObservable<T5> source5,
          ZipFunc<T1, T2, T3, T4, T5, TR> resultSelector)
        : base(
            source1.IsRequiredSubscribeOnCurrentThread() || 
            source2.IsRequiredSubscribeOnCurrentThread() || 
            source3.IsRequiredSubscribeOnCurrentThread() || 
            source4.IsRequiredSubscribeOnCurrentThread() || 
            source5.IsRequiredSubscribeOnCurrentThread() || 
            false)
    {
        this.source1 = source1;
        this.source2 = source2;
        this.source3 = source3;
        this.source4 = source4;
        this.source5 = source5;
        this.resultSelector = resultSelector;
    }

    protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
    {
        return new Zip(this, observer, cancel).Run();
    }

    class Zip : NthZipObserverBase<TR>
    {
        readonly ZipObservable<T1, T2, T3, T4, T5, TR> parent;
        readonly object gate = new object();
        readonly Queue<T1> q1 = new Queue<T1>();
        readonly Queue<T2> q2 = new Queue<T2>();
        readonly Queue<T3> q3 = new Queue<T3>();
        readonly Queue<T4> q4 = new Queue<T4>();
        readonly Queue<T5> q5 = new Queue<T5>();

        public Zip(ZipObservable<T1, T2, T3, T4, T5, TR> parent, IObserver<TR> observer, IDisposable cancel)
            : base(observer, cancel)
        {
            this.parent = parent;
        }

        public IDisposable Run()
        {
            base.SetQueue(new System.Collections.ICollection[] { q1, q2, q3, q4, q5 });
            var s1 = parent.source1.Subscribe(new ZipObserver<T1>(gate, this, 0, q1));
            var s2 = parent.source2.Subscribe(new ZipObserver<T2>(gate, this, 1, q2));
            var s3 = parent.source3.Subscribe(new ZipObserver<T3>(gate, this, 2, q3));
            var s4 = parent.source4.Subscribe(new ZipObserver<T4>(gate, this, 3, q4));
            var s5 = parent.source5.Subscribe(new ZipObserver<T5>(gate, this, 4, q5));

            return StableCompositeDisposable.Create(s1, s2, s3, s4, s5, Disposable.Create(() =>
            {
                lock (gate)
                {
                    q1.Clear(); q2.Clear(); q3.Clear(); q4.Clear(); q5.Clear();
                }
            }));
        }

        public override TR GetResult()
        {
            return parent.resultSelector(q1.Dequeue(), q2.Dequeue(), q3.Dequeue(), q4.Dequeue(), q5.Dequeue());
        }

        public override void OnNext(TR value)
        {
            base.observer.OnNext(value);
        }

        public override void OnError(Exception error)
        {
            try { observer.OnError(error); }
            finally { Dispose(); }
        }

        public override void OnCompleted()
        {
            try { observer.OnCompleted(); }
            finally { Dispose(); }
        }
    }
}


internal class ZipObservable<T1, T2, T3, T4, T5, T6, TR> : OperatorObservableBase<TR>
{
    IObservable<T1> source1;
    IObservable<T2> source2;
    IObservable<T3> source3;
    IObservable<T4> source4;
    IObservable<T5> source5;
    IObservable<T6> source6;
    ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector;

    public ZipObservable(
        IObservable<T1> source1,
        IObservable<T2> source2,
        IObservable<T3> source3,
        IObservable<T4> source4,
        IObservable<T5> source5,
        IObservable<T6> source6,
          ZipFunc<T1, T2, T3, T4, T5, T6, TR> resultSelector)
        : base(
            source1.IsRequiredSubscribeOnCurrentThread() || 
            source2.IsRequiredSubscribeOnCurrentThread() || 
            source3.IsRequiredSubscribeOnCurrentThread() || 
            source4.IsRequiredSubscribeOnCurrentThread() || 
            source5.IsRequiredSubscribeOnCurrentThread() || 
            source6.IsRequiredSubscribeOnCurrentThread() || 
            false)
    {
        this.source1 = source1;
        this.source2 = source2;
        this.source3 = source3;
        this.source4 = source4;
        this.source5 = source5;
        this.source6 = source6;
        this.resultSelector = resultSelector;
    }

    protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
    {
        return new Zip(this, observer, cancel).Run();
    }

    class Zip : NthZipObserverBase<TR>
    {
        readonly ZipObservable<T1, T2, T3, T4, T5, T6, TR> parent;
        readonly object gate = new object();
        readonly Queue<T1> q1 = new Queue<T1>();
        readonly Queue<T2> q2 = new Queue<T2>();
        readonly Queue<T3> q3 = new Queue<T3>();
        readonly Queue<T4> q4 = new Queue<T4>();
        readonly Queue<T5> q5 = new Queue<T5>();
        readonly Queue<T6> q6 = new Queue<T6>();

        public Zip(ZipObservable<T1, T2, T3, T4, T5, T6, TR> parent, IObserver<TR> observer, IDisposable cancel)
            : base(observer, cancel)
        {
            this.parent = parent;
        }

        public IDisposable Run()
        {
            base.SetQueue(new System.Collections.ICollection[] { q1, q2, q3, q4, q5, q6 });
            var s1 = parent.source1.Subscribe(new ZipObserver<T1>(gate, this, 0, q1));
            var s2 = parent.source2.Subscribe(new ZipObserver<T2>(gate, this, 1, q2));
            var s3 = parent.source3.Subscribe(new ZipObserver<T3>(gate, this, 2, q3));
            var s4 = parent.source4.Subscribe(new ZipObserver<T4>(gate, this, 3, q4));
            var s5 = parent.source5.Subscribe(new ZipObserver<T5>(gate, this, 4, q5));
            var s6 = parent.source6.Subscribe(new ZipObserver<T6>(gate, this, 5, q6));

            return StableCompositeDisposable.Create(s1, s2, s3, s4, s5, s6, Disposable.Create(() =>
            {
                lock (gate)
                {
                    q1.Clear(); q2.Clear(); q3.Clear(); q4.Clear(); q5.Clear(); q6.Clear();
                }
            }));
        }

        public override TR GetResult()
        {
            return parent.resultSelector(q1.Dequeue(), q2.Dequeue(), q3.Dequeue(), q4.Dequeue(), q5.Dequeue(), q6.Dequeue());
        }

        public override void OnNext(TR value)
        {
            base.observer.OnNext(value);
        }

        public override void OnError(Exception error)
        {
            try { observer.OnError(error); }
            finally { Dispose(); }
        }

        public override void OnCompleted()
        {
            try { observer.OnCompleted(); }
            finally { Dispose(); }
        }
    }
}


internal class ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> : OperatorObservableBase<TR>
{
    IObservable<T1> source1;
    IObservable<T2> source2;
    IObservable<T3> source3;
    IObservable<T4> source4;
    IObservable<T5> source5;
    IObservable<T6> source6;
    IObservable<T7> source7;
    ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector;

    public ZipObservable(
        IObservable<T1> source1,
        IObservable<T2> source2,
        IObservable<T3> source3,
        IObservable<T4> source4,
        IObservable<T5> source5,
        IObservable<T6> source6,
        IObservable<T7> source7,
          ZipFunc<T1, T2, T3, T4, T5, T6, T7, TR> resultSelector)
        : base(
            source1.IsRequiredSubscribeOnCurrentThread() || 
            source2.IsRequiredSubscribeOnCurrentThread() || 
            source3.IsRequiredSubscribeOnCurrentThread() || 
            source4.IsRequiredSubscribeOnCurrentThread() || 
            source5.IsRequiredSubscribeOnCurrentThread() || 
            source6.IsRequiredSubscribeOnCurrentThread() || 
            source7.IsRequiredSubscribeOnCurrentThread() || 
            false)
    {
        this.source1 = source1;
        this.source2 = source2;
        this.source3 = source3;
        this.source4 = source4;
        this.source5 = source5;
        this.source6 = source6;
        this.source7 = source7;
        this.resultSelector = resultSelector;
    }

    protected override IDisposable SubscribeCore(IObserver<TR> observer, IDisposable cancel)
    {
        return new Zip(this, observer, cancel).Run();
    }

    class Zip : NthZipObserverBase<TR>
    {
        readonly ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent;
        readonly object gate = new object();
        readonly Queue<T1> q1 = new Queue<T1>();
        readonly Queue<T2> q2 = new Queue<T2>();
        readonly Queue<T3> q3 = new Queue<T3>();
        readonly Queue<T4> q4 = new Queue<T4>();
        readonly Queue<T5> q5 = new Queue<T5>();
        readonly Queue<T6> q6 = new Queue<T6>();
        readonly Queue<T7> q7 = new Queue<T7>();

        public Zip(ZipObservable<T1, T2, T3, T4, T5, T6, T7, TR> parent, IObserver<TR> observer, IDisposable cancel)
            : base(observer, cancel)
        {
            this.parent = parent;
        }

        public IDisposable Run()
        {
            base.SetQueue(new System.Collections.ICollection[] { q1, q2, q3, q4, q5, q6, q7 });
            var s1 = parent.source1.Subscribe(new ZipObserver<T1>(gate, this, 0, q1));
            var s2 = parent.source2.Subscribe(new ZipObserver<T2>(gate, this, 1, q2));
            var s3 = parent.source3.Subscribe(new ZipObserver<T3>(gate, this, 2, q3));
            var s4 = parent.source4.Subscribe(new ZipObserver<T4>(gate, this, 3, q4));
            var s5 = parent.source5.Subscribe(new ZipObserver<T5>(gate, this, 4, q5));
            var s6 = parent.source6.Subscribe(new ZipObserver<T6>(gate, this, 5, q6));
            var s7 = parent.source7.Subscribe(new ZipObserver<T7>(gate, this, 6, q7));

            return StableCompositeDisposable.Create(s1, s2, s3, s4, s5, s6, s7, Disposable.Create(() =>
            {
                lock (gate)
                {
                    q1.Clear(); q2.Clear(); q3.Clear(); q4.Clear(); q5.Clear(); q6.Clear(); q7.Clear();
                }
            }));
        }

        public override TR GetResult()
        {
            return parent.resultSelector(q1.Dequeue(), q2.Dequeue(), q3.Dequeue(), q4.Dequeue(), q5.Dequeue(), q6.Dequeue(), q7.Dequeue());
        }

        public override void OnNext(TR value)
        {
            base.observer.OnNext(value);
        }

        public override void OnError(Exception error)
        {
            try { observer.OnError(error); }
            finally { Dispose(); }
        }

        public override void OnCompleted()
        {
            try { observer.OnCompleted(); }
            finally { Dispose(); }
        }
    }
}


